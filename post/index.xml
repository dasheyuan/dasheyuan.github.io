<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Yuan&#39;s Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/post/</link>
    
    
    <copyright>Copyright (c) 2016,Chen Yuan; all rights reserved.</copyright>
    <updated>Sun, 21 Feb 2016 19:27:28 CST</updated>
    
    <item>
      <title>Blog与Markdown</title>
      <link>http://dasheyuan.com/post/2016-02-21</link>
      <pubDate>Sun, 21 Feb 2016 19:27:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/2016-02-21</guid>
      <description>参考 Nanshu Wang Hugo docs 《内核恐慌》静态网站生成器 Build Static Sites in Seconds with Hugo Setting up a custom domain with GitHub Pages</description>
    </item>
    
    <item>
      <title>Hugo静态网站生成器教程(转)</title>
      <link>http://dasheyuan.com/post/2015-01-31</link>
      <pubDate>Sat, 20 Feb 2016 19:00:03 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/2015-01-31</guid>
      <description>&lt;p&gt;(转)&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;Hugo静态网站生成器中文教程&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言:d605f9890f3528aea462ac7515ece633&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;是什么？官方文档是这样介绍它的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hugo是一种通用的网站框架。严格来说，Hugo应该被称作静态网站生成器。&lt;/p&gt;

&lt;p&gt;静态网站生成器从字面上来理解，就是将你的内容生成静态网站。所谓“静态”的含义其实反映在网站页面的生成的时间。一般的web服务器（WordPress, Ghost, Drupal等等）在收到页面请求时，需要调用数据库生成页面（也就是HTML代码），再返回给用户请求。而静态网站则不需要在收到请求后生成页面，而是在整个网站建立起之前就将所有的页面全部生成完成，页面一经生成便称为静态文件，访问时直接返回现成的静态页面，不需要数据库的参与。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenStack中的设计模式-单例模式</title>
      <link>http://dasheyuan.com/post/2016-02-14</link>
      <pubDate>Sun, 14 Feb 2016 21:30:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/2016-02-14</guid>
      <description>&lt;p&gt;单例模式Singleton Pattern最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。”&lt;/p&gt;

&lt;p&gt;对于面向对象编程，有一些对象其实只需要一个，比如：线程池、缓存、处理偏好设置和注册表的对象、日志对象等。事实上，这些对象只能有一个实例。单例模式与全局变量一样方便，又没有全局变量的缺点。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

