<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Php on Chen Yuan&#39;s Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/tags/php/</link>
    
    
    <copyright>Copyright (c) 2016,Chen Yuan; all rights reserved.</copyright>
    <updated>Thu, 02 Jun 2016 23:00:00 CST</updated>
    
    <item>
      <title>PHP的依赖管理工具Composer(2)</title>
      <link>http://dasheyuan.com/post/php-composer-2</link>
      <pubDate>Thu, 02 Jun 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-composer-2</guid>
      <description>&lt;p&gt;之前介绍过如何安装Composer和简单使用，出门左拐能找到。&lt;br /&gt;
&lt;a href=&#34;http://http://dasheyuan.com/post/php-composer-1/&#34;&gt;PHP的依赖管理工具Composer(1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在更深入地学习Composer。在上一篇MyProject的&lt;code&gt;app.php&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;
$log = new Monolog\Logger(&#39;name&#39;);

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是为了 &lt;code&gt;new Monolog\Logger(&#39;name&#39;)&lt;/code&gt; ，所以&lt;code&gt;require &#39;vendor/autoload.php&#39;&lt;/code&gt;，作用是为了找到Monolog\Logger类的实现代码，然后require。&lt;br /&gt;
这应该很好理解，因为假如不用&lt;code&gt;require &#39;vendor/autoload.php&#39;&lt;/code&gt;，那就必须require &lt;code&gt;Logger.php&lt;/code&gt;源码。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>学习PHP闭包(Closure)</title>
      <link>http://dasheyuan.com/post/php-closure</link>
      <pubDate>Sat, 28 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-closure</guid>
      <description>&lt;p&gt;在学习Laravel框架的时候遇到了“闭包”的概念，查PHP的手册及网上的解释，分析对比一下，试着去理解。&lt;/p&gt;

&lt;p&gt;可能目前理解的还不妥，先记录下来吧。&lt;/p&gt;

&lt;h2 id=&#34;一-闭包函数的基本用法&#34;&gt;一、闭包函数的基本用法&lt;/h2&gt;

&lt;p&gt;匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。&lt;br /&gt;
Example #1 匿名函数示例，用作回调函数参数的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo preg_replace_callback(&#39;~-([a-z])~&#39;, function ($match) {
    return strtoupper($match[1]);
}, &#39;hello-world&#39;);
// 输出 helloWorld
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHP的依赖管理工具Composer(1)</title>
      <link>http://dasheyuan.com/post/php-composer-1</link>
      <pubDate>Sat, 21 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-composer-1</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://image.phpcomposer.com/d/1e/768684492400b1470aa7882b29d5c.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
无论是在系统中，还是在高级编程语言中，依赖管理工具都扮演着重要的角色，因为它极大地提高了我们的开发效率。&lt;/p&gt;

&lt;p&gt;Ubuntu有apt-get，Python有pip，Node.js有npm，PHP呢？&lt;/p&gt;

&lt;p&gt;PHP有Composer。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

