<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>C&#43;&#43; on Chen Yuan&#39;s Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/tags/c&#43;&#43;/</link>
    
    
    <copyright>Copyright (c) 2017,Chen Yuan; all rights reserved.</copyright>
    <updated>Sat, 07 Oct 2017 23:00:00 CST</updated>
    
    <item>
      <title>C&#43;&#43;11多线程编程(2)</title>
      <link>http://dasheyuan.com/post/cpp-11-multithreading-part-2/</link>
      <pubDate>Sat, 07 Oct 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-11-multithreading-part-2/</guid>
      <description>&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;多线程创建和参数传递&lt;/li&gt;
&lt;li&gt;多线程条件竞争及其解决方法&lt;/li&gt;
&lt;li&gt;多线程事件处理、条件变量&lt;/li&gt;
&lt;li&gt;多线程返回值&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-1-多线程事件处理&#34;&gt;3.1 多线程事件处理&lt;/h3&gt;

&lt;p&gt;在第1部分中对多线程的创建、参数传递的使用作了说明，另外对线程间数据共享导致竞争条件异常进行了分析，并给出互斥锁的解决方式。我继续参考thisPointer的教程，深入多线程的事件处理。&lt;br /&gt;
什么是多线程的事件处理？有时候，线程往往需要等待类似于条件为真或另一个线程任务完成的事件，这就是多线程的事件处理。先来看一个程序需求。&lt;/p&gt;

&lt;h4 id=&#34;3-1-1-功能分析&#34;&gt;3.1.1 功能分析&lt;/h4&gt;

&lt;p&gt;现在我们需要实现一个网络编程的客户端程序，这个程序的任务如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;连接服务器&lt;/li&gt;
&lt;li&gt;从XML文件加载数据&lt;/li&gt;
&lt;li&gt;发送加载的数据&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;分析易知任务1与其他两个任务是独立的，但任务3依赖于任务2。任务1和任务2可以设计在两个平行执行的线程上实现，从而提升程序的性能。&lt;br /&gt;
下面我们将使用多线程的方式设计客户端程序。这个程序包含两个线程，线程1需要完成的任务是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;连接服务器&lt;/li&gt;
&lt;li&gt;等待线程2加载XML文件的数据&lt;/li&gt;
&lt;li&gt;发送加载的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程2需要完成的任务是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从XML文件中加载数据&lt;/li&gt;
&lt;li&gt;通知其他等待该数据的线程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://thispointer.com/wp-content/uploads/2015/06/first.png&#34; alt=&#34;demo&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11多线程编程(1)</title>
      <link>http://dasheyuan.com/post/cpp-11-multithreading-part-1/</link>
      <pubDate>Fri, 06 Oct 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-11-multithreading-part-1/</guid>
      <description>&lt;p&gt;前段时间，我在Google &lt;code&gt;std::thread&lt;/code&gt;时，读到了网站&lt;a href=&#34;http://thispointer.com/category/multithreading/&#34;&gt;thispointer.com&lt;/a&gt;的多线程入门教程，该教程通俗易懂，但又不缺乏深度，其示例代码结合了许多C++11的新的特性，比如匿名函数等(第4部分进行拓展说明)。&lt;br /&gt;
下面，我就按照这个教程，介绍C++11 Multithreading。&lt;/p&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;多线程创建和参数传递&lt;/li&gt;
&lt;li&gt;多线程条件竞争及其解决方法&lt;/li&gt;
&lt;li&gt;多线程事件处理、条件变量&lt;/li&gt;
&lt;li&gt;多线程返回值&lt;/li&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C++11已经支持多线程，但编译时需要添加&lt;code&gt;-std=c++11&lt;/code&gt;和 &lt;code&gt;-pthread&lt;/code&gt;选项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ -std=c++11 sample.cpp -pthread
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用CMake编译：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//CMakeLists.txt 中添加
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} &amp;quot;-std=c++11 -pthread&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;头文件：&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;测试框架Catch</title>
      <link>http://dasheyuan.com/post/cpp-test-framework-catch/</link>
      <pubDate>Sun, 07 May 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-test-framework-catch/</guid>
      <description>&lt;h1 id=&#34;catch简介&#34;&gt;Catch简介&lt;/h1&gt;

&lt;p&gt;Catch 一种是 C++ 测试框架。&lt;br /&gt;
主要特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置简单，下载&lt;code&gt;catch.hpp&lt;/code&gt;，然后&lt;code&gt;#include&lt;/code&gt;即可。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无需额外库依赖。只要能编译 C++ 98 和包含 C++ 标准库。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;编写测试用例与编写函数一样。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Section&lt;/code&gt;中测试用例是独立运行的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;兼容测试用例传统风格和BDD风格：&lt;code&gt;Given-When-Then&lt;/code&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;条件比较是只用一个核心的警告宏。使用了标准的C/C++ 运算符重载功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;测试工具Valgrind</title>
      <link>http://dasheyuan.com/post/cpp-test-tool-valgrind/</link>
      <pubDate>Sun, 07 May 2017 22:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-test-tool-valgrind/</guid>
      <description>&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;

&lt;p&gt;测试C++程序时，我们通常会在意两件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行结果是否正确？&lt;/li&gt;
&lt;li&gt;是否发生了内存泄漏？&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一件事所有编程语言都需要在意，通常是给程序各种输入，检验输出的正确性，Catch是一个轻巧的单元测试框架，学习起来非常容易；&lt;/p&gt;

&lt;p&gt;第二件事应该是C/C++独有的，需要跟踪运行时动态分配的内存，虽然可以自行重载new/delete运算符做到这一点，但Valgrind可以为我们检测绝大多数内存相关问题（包括内存泄漏、数组越界、使用未初始化变量等）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

