<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>翻译 on Chen Yuan&#39;s Blogs </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/tags/%E7%BF%BB%E8%AF%91/</link>
    <language>en-us</language>
    
    <copyright>Copyright (c) 2016,Chen Yuan; all rights reserved.</copyright>
    <updated>Mon, 31 Aug 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Python代码风格指南（三）命名约定(PEP8中文翻译)</title>
      <link>http://dasheyuan.com/post/2015-09-14</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 UTC</pubDate>
      
      <guid>http://dasheyuan.com/post/2015-09-14</guid>
      <description>&lt;h1 id=&#34;命名约定-naming-conventions:26bc06cdd4e62ee943404b26c97620ec&#34;&gt;命名约定（Naming Conventions）&lt;/h1&gt;

&lt;p&gt;Python标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。&lt;/p&gt;

&lt;h2 id=&#34;重写原则-overriding-principle:26bc06cdd4e62ee943404b26c97620ec&#34;&gt;重写原则（Overriding Principle）&lt;/h2&gt;

&lt;p&gt;对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。&lt;/p&gt;

&lt;h2 id=&#34;描述性-命名风格-descriptive-naming-styles:26bc06cdd4e62ee943404b26c97620ec&#34;&gt;描述性：命名风格（Descriptive: Naming Styles）&lt;/h2&gt;

&lt;p&gt;存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。&lt;/p&gt;

&lt;p&gt;以下是常用于区分的命名风格：&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python代码风格指南（二）字符串引用、空格、注释和版本注记(PEP8中文翻译)</title>
      <link>http://dasheyuan.com/post/2015-08-30</link>
      <pubDate>Sun, 30 Aug 2015 00:00:00 UTC</pubDate>
      
      <guid>http://dasheyuan.com/post/2015-08-30</guid>
      <description>&lt;h1 id=&#34;字符串引用-string-quotes:4f740b0dc79b8c0d748c37b6117fb209&#34;&gt;字符串引用(String Quotes)&lt;/h1&gt;

&lt;p&gt;在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。&lt;/p&gt;

&lt;p&gt;对于三引号表示的字符串，使用双引号字符来表示（译注：即用&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;而不是&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt;），这样可以和PEP 257的文档字符串（docstring）规则保持一致。&lt;/p&gt;

&lt;h1 id=&#34;表达式和语句中的空格-whitespace-in-expressions-and-statements:4f740b0dc79b8c0d748c37b6117fb209&#34;&gt;表达式和语句中的空格(Whitespace in Expressions and Statements)&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Python代码风格指南（一）代码设计(PEP8中文翻译)</title>
      <link>http://dasheyuan.com/post/2015-07-04</link>
      <pubDate>Sat, 04 Jul 2015 00:00:00 UTC</pubDate>
      
      <guid>http://dasheyuan.com/post/2015-07-04</guid>
      <description>&lt;p&gt;翻译自：&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP 8 - Style Guide for Python Code&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;介绍-introduction:0c8ec52d92a7c32bcce67dfaa3143f15&#34;&gt;介绍(Introduction)&lt;/h1&gt;

&lt;p&gt;这篇文档说明了Python主要发行版中标准库代码所遵守的规范。请参考实现Python的C代码风格指南信息PEP。&lt;/p&gt;

&lt;p&gt;这篇文档和PEP 257(Docstring Conventions)都改编自Guido(译注：Python之父)最早的Python风格指南文章，并加入了Barry风格指南里的内容。&lt;/p&gt;

&lt;p&gt;语言自身在发生着改变，随着新的规范的出现和旧规范的过时，代码风格也会随着时间演变。&lt;/p&gt;

&lt;p&gt;很多项目都有自己的一套风格指南。若和本指南有任何冲突，应该优先考虑其项目相关的那套指南。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scikit-Learn机器学习介绍（中文翻译）</title>
      <link>http://dasheyuan.com/post/2014-12-02</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://dasheyuan.com/post/2014-12-02</guid>
      <description>&lt;p&gt;翻译自：&lt;a href=&#34;http://scikit-learn.org/stable/tutorial/basic/tutorial.html&#34;&gt;http://scikit-learn.org/stable/tutorial/basic/tutorial.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以后可能会根据自己的学习慢慢翻译其他的章节，水平有限，不足之处请指正。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本章内容
在本章中，我们会介绍在使用scikit-learn中遇到的[机器学习]&lt;a href=&#34;machine learning&#34;&gt;1&lt;/a&gt;术语，以及一个简单的机器学习例子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;机器学习-问题设定:935e1a74f960fd04b26b502f6058f057&#34;&gt;机器学习：问题设定&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;一般来说，机器学习问题可以这样来理解：我们有n个[样本]&lt;a href=&#34;sample&#34;&gt;2&lt;/a&gt;的数据集，想要预测未知数据的属性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>软件自定义网络Software-Definded Networking</title>
      <link>http://dasheyuan.com/post/2013-10-22</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 UTC</pubDate>
      
      <guid>http://dasheyuan.com/post/2013-10-22</guid>
      <description>&lt;p&gt;译自：&lt;a href=&#34;https://en.wikipedia.org/wiki/Software-defined_networking&#34;&gt;https://en.wikipedia.org/wiki/Software-defined_networking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;软件定义网络（Software-Definded Networking, SDN）最初来源于2008年左右在加州大学伯克利分校和斯坦福大学的研究工作，而后演化成为一种新型的计算机网络。[1] SDN允许网络管理员通过对低层功能的抽象来管理网络服务。具体实现是通过将决定流量从如何发送的系统（控制平面）从底层转发流量到指定目的的系统（数据平面）分离开来。这项技术的发明者们和系统的供应商们认为SDN可以达到简化网络的目的。[2]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

