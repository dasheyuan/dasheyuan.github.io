<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Chen Yuan&#39;s Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/</link>
    
    
    <copyright>Copyright (c) 2016,Chen Yuan; all rights reserved.</copyright>
    <updated>Tue, 17 May 2016 23:00:00 CST</updated>
    
    <item>
      <title>GitHub的高级搜索功能</title>
      <link>http://dasheyuan.com/post/github-advanced-search</link>
      <pubDate>Tue, 17 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/github-advanced-search</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://help.github.com/assets/images/help/search/advanced_search_demo.gif&#34; alt=&#34;&#34; /&gt;
今天才发现GitHub是支持高级搜索功能的，使用了一下，功能很棒，就是搜索页面太“隐秘”了，现在才发现这个功能。&lt;/p&gt;

&lt;p&gt;高级搜索链接：&lt;a href=&#34;https://github.com/search/advanced&#34;&gt;https://github.com/search/advanced&lt;/a&gt;&lt;br /&gt;
也可以点击GitHub搜索框，回车后，出现的页面中提示支持Advanced Search功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu中Node.js的安装方法</title>
      <link>http://dasheyuan.com/post/ubuntu-install-nodejs-scripts</link>
      <pubDate>Thu, 12 May 2016 22:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/ubuntu-install-nodejs-scripts</guid>
      <description>&lt;p&gt;最近重新学习一下JavaScript，了解Node.js是什么，给自己充充电。&lt;/p&gt;

&lt;p&gt;Ubuntu直接使用&lt;code&gt;sudo apt-get install nodejs&lt;/code&gt;命名安装Node.js无法安装最新版本。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;官网&lt;/a&gt;上给出来的安装命令可以解决这个问题:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -

sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl &lt;code&gt;-s&lt;/code&gt; 静默状态，即不输出任何信息。&lt;/p&gt;

&lt;p&gt;curl &lt;code&gt;-L&lt;/code&gt; 重定向地址，即如果当前地址发生重定向，获取重定向的地址的内容(参考1)。&lt;/p&gt;

&lt;p&gt;sudo &lt;code&gt;-E&lt;/code&gt; 在sudo执行时保留当前用户已存在的环境变量,不会被sudo重置。&lt;/p&gt;

&lt;p&gt;sudo apt-get install &lt;code&gt;-y&lt;/code&gt; 默认安装过程中的确认步骤(yes)。&lt;/p&gt;

&lt;p&gt;bash &lt;code&gt;-&lt;/code&gt;（参考2）&lt;/p&gt;

&lt;h3 id=&#34;关于减号-的用途:3c5bcaeaf18fe8a0464d0cde8792c2a3&#34;&gt;“关于减号 - 的用途&lt;/h3&gt;

&lt;p&gt;管线命令在 bash 的连续的处理程序中是相当重要的！另外，在 log file 的分析当中也是相当重要的一环， 所以请特别留意！另外，在管线命令当中，常常会使用到前一个命令的 stdout 作为这次的 stdin ， 某些命令需要用到文件名 (例如 tar) 来进行处理时，该 stdin 与 stdout 可以利用减号 &amp;ldquo;-&amp;rdquo; 来替代， 举例来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -cvf - /home | tar -xvf -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个例子是说：『我将 /home 里面的文件给他打包，但打包的数据不是纪录到文件，而是传送到 stdout； 经过管线后，将 tar -cvf - /home 传送给后面的 tar -xvf - 』。后面的这个 - 则是取用前一个命令的 stdout， 因此，我们就不需要使用 file 了！这是很常见的例子喔！注意注意！&lt;/p&gt;

&lt;h3&gt;”&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>SSH免密码登录远程主机</title>
      <link>http://dasheyuan.com/post/remote-login-without-password</link>
      <pubDate>Sat, 07 May 2016 18:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/remote-login-without-password</guid>
      <description>&lt;p&gt;操作Linux系统一般会使用SSH工具进行远程登录系统操作。&lt;/p&gt;

&lt;p&gt;使用SSH工具远程登录系统，一般会使用Linux系统的账号和密码。&lt;/p&gt;

&lt;p&gt;使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。&lt;/p&gt;

&lt;p&gt;所谓&amp;rdquo;公钥登录&amp;rdquo;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。&lt;/p&gt;

&lt;p&gt;另外，这个过程之前会有一个远程主机向用户发送远程主机公钥的过程，用户需要判断远程主机的公钥是否是真正的远程主机，不然就会带来安全问题（&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;中间者攻击&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;可以知道，上面的过程要用到&lt;strong&gt;两对&lt;/strong&gt;密钥对。一对是用作远程主机向客户端安全通信的，一对用作是客户端向远程主机安全通信的。&lt;/p&gt;

&lt;p&gt;测试环境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04安装openssh-server作为远程服务器，用户：bwa  IP：192.168.27.128&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04终端作为客户端 IP：192.168.27.3，或者使用Xshell工具登录&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试步骤&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>北京爱立信参观交流</title>
      <link>http://dasheyuan.com/post/visit-beijing-ericsson</link>
      <pubDate>Wed, 27 Apr 2016 18:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/visit-beijing-ericsson</guid>
      <description>&lt;p&gt;4月26日至29日，爱立信“技术创新周”在北京爱立信电信大厦举行，我们这边实验室也收到了邀请。今天有幸能跟随着老师到爱立信参观学习。“创新周活动以‘创新成就未来’为主题，全面呈现爱立信在5G、云和IP、物联网、网络社会等领域的技术创新和领先的解决方案”。上一句话来自网络，我引过来是为了把文章显得高(cou)大(zi)上(shu)的:)&lt;/p&gt;

&lt;p&gt;我们这边课题组这边也是在5G领域有一定的研究，上面列举的一些5G前沿的技术平时都会所接触和了解，所以不会因为他们所展示的技术比较前沿、广泛而无趣。就把今天参观的过程和感想记录一些吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse IoT 2016 物联网开发者调查统计</title>
      <link>http://dasheyuan.com/post/iot-developer-survey-2016</link>
      <pubDate>Wed, 20 Apr 2016 21:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/iot-developer-survey-2016</guid>
      <description>&lt;p&gt;2016年4月14日，Eclipse IoT工作组发布了年度的物联网开发者调查结果，这次调查联合了IEEE IoT和AGILE-IoT组织，扩大了参与者的范围和回应，今年调查参与者从去年392人增加到528人。调查数据统计的结果更有参考价值了。&lt;/p&gt;

&lt;p&gt;从2016年调查的结果分析，有以下几点关键趋势：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;目前，大部分参与者的公司正在或将研发IoT解决方案。&lt;/li&gt;
&lt;li&gt;安全问题成为了一个关键的研究问题。&lt;/li&gt;
&lt;li&gt;IoT开发编程语言排行：Java， C， Java Script, Python。&lt;/li&gt;
&lt;li&gt;MQTT和HTTP在消息协议占主要地位。（CoAP紧跟其后）&lt;/li&gt;
&lt;li&gt;IoT操作系统Linux占主要地位。&lt;/li&gt;
&lt;li&gt;AWS主导者IoT云服务。（私有云紧跟其后）&lt;/li&gt;
&lt;li&gt;IoT开源代码无处不在。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>MQTT和Modbus物联网协议简介(译)</title>
      <link>http://dasheyuan.com/post/iot-mqtt-modbus-comparison</link>
      <pubDate>Wed, 20 Apr 2016 18:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/iot-mqtt-modbus-comparison</guid>
      <description>&lt;p&gt;翻译到最后才发现这是一篇广告文。呵呵。&lt;br /&gt;
译文地址：&lt;a href=&#34;https://software.intel.com/en-us/articles/a-comparison-of-iot-gateway-protocols-mqtt-and-modbus&#34;&gt;https://software.intel.com/en-us/articles/a-comparison-of-iot-gateway-protocols-mqtt-and-modbus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;物联网不仅仅是新技术，它也是目前技术的整合，其中一个关键的属性就是通信。可用的通信（协议）方式是多种多样，但正是这大量的通信协议，在把那些“乱七八糟”的“物”连接到互联网中扮演着重要的角色。这篇文章将研究物联网中两个互补的通信协议：Modbus,一种短距离设备间通信的协议；Message Queuing Telemetry Transport（MQTT），一种可拓展的全球通信的互联协议。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub上删不掉的issues</title>
      <link>http://dasheyuan.com/post/github-issues</link>
      <pubDate>Thu, 14 Apr 2016 23:30:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/github-issues</guid>
      <description>&lt;p&gt;小结一下GitHub上的issues功能，很有意思。&lt;/p&gt;

&lt;p&gt;今天发现&lt;a href=&#34;http://yikun.github.io&#34;&gt;Yikun&lt;/a&gt;的博客中的图床地址很特别：cloud.githubusercontent.com。探究了一番之后发现他是用GitHub的issues的功能来写的博客，图片可以直接拖拽到issues的编辑框中，然后自动上传github的服务器，生成图床地址的。&lt;/p&gt;

&lt;p&gt;测试issues中上传图片的功能之后想删除测试的issue，但发现是删不掉的！！！如同版本提交commits，也是删不掉的。另外，对应issues的每一个操作都会记录下来。&lt;br /&gt;
这样的设计应该是有原因的，现在想不明白，以后再探究吧。&lt;br /&gt;
今天也大概了解了一下GitHub的API，也挺好玩的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hp 2570p准系统组装经历</title>
      <link>http://dasheyuan.com/post/barebone-system</link>
      <pubDate>Tue, 12 Apr 2016 23:30:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/barebone-system</guid>
      <description>&lt;p&gt;第一次接触“准系统”这三个字还是上个月的事吧，因为考虑入手一台二手的笔记本以备不时之需。准系统不是什么高大上的东西，笔记本（台式机也一样）去掉CPU、内存、硬盘等后就可以叫“准系统”。笔记本出厂阶段都有一个准系统的阶段的。&lt;/p&gt;

&lt;p&gt;准系统除了厂家生产出售的，还存在由外国淘汰掉的，俗称洋垃圾，流进国内的笔记本。为了提高倒卖价格，把笔记本拆分成准系统出售。也有可能是内存、硬盘毁掉（重要数据）了，笔记本再被回收流转的。&lt;/p&gt;

&lt;p&gt;扯了一些概念，还是看看我组装好的笔记本配置及总共花费吧。&lt;/p&gt;

&lt;p&gt;安装好Win10系统，开机在10秒内！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;购买平台         配件类型           型号             价格 
论坛/淘宝        准系统           hp 2570p          600
淘宝             CPU             i5 3230m         458
京东             内存x2           金士顿 4G         234
京东             固态硬盘         闪迪 加强版240G    379
                                             合计：1671
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从刚开始的入手台笔记本的想法到现在，墨迹了大半个月。一般是在数码之家上了解二手交易的信息，有时候也会在闲鱼上看一下，浏览一下有没有“笋野”。&lt;/p&gt;

&lt;p&gt;终于，上周五，为了不想再花时间耗在这方面，头一热，和论坛里一个“二手商”交流了一下，就从他那里入手台了hp 2570p的准系统。特意加了50块要台成色最好的，不知道有没有被坑。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LTE终端信号强度单位dBm与asu的关系</title>
      <link>http://dasheyuan.com/post/arbitrary-strength-unit</link>
      <pubDate>Thu, 07 Apr 2016 23:30:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/arbitrary-strength-unit</guid>
      <description>&lt;p&gt;最近在看LTE的入门通识相关的资料。LTE终端进行小区选择的过程中，会测量小区参考信号的信号强度RSRP，然后根据测量到的RSRP，通过选择算法进行判决，判决通过后，终端就会与目标小区同步。选择算法中提到一个值Q_rxlevmin，指可驻留的目标小区需要的最低RSRP，通常为-124dBm。&lt;/p&gt;

&lt;p&gt;顺手拿去手机，想看一下手机上有没有信号强度相关的信息。找到一组数据“信号强度 -61dBm 26asu”。dBm是常见的功率参考单位，那么asu又是什么呢？&lt;br /&gt;
asu也是一种信号强度参考（相对）单位，一般出现在Android系统的手机中。&lt;br /&gt;
asu，维基百科中指的是Arbitrary Strength Unit，百度却是Alone Signal Unit，我没有找到确实的出处。后来一想，这在Android API中就指的是一个相对于dBm的整形变量，具体定义是什么并不重要了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建OpenStack/DevStack远程开发调试环境</title>
      <link>http://dasheyuan.com/post/openstack-dev-environment</link>
      <pubDate>Fri, 01 Apr 2016 15:22:01 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/openstack-dev-environment</guid>
      <description>&lt;p&gt;在开始写这篇文章的时候，有种感慨：搭建OpenStack/DevStack开发调试环境&lt;strong&gt;成本&lt;/strong&gt;真不低，涉及的技术比较多。不知道什么时候对OpenStack的开发与PHP一样，可以一键部署开发环境呢？&lt;/p&gt;

&lt;p&gt;这篇文章记录的是如何搭建OpenStack/DevStack的开发环境，具体调试过程将结合一个Neutron API新建的例子。&lt;/p&gt;

&lt;p&gt;这是在网上查找参考的基础上，自己进行的测试，记录下来希望加深自己的理解。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PyCharm远程调试</title>
      <link>http://dasheyuan.com/post/pycharm-remote-debugging</link>
      <pubDate>Wed, 30 Mar 2016 15:22:01 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/pycharm-remote-debugging</guid>
      <description>&lt;p&gt;PyCharm提供两种远程调试(Remote Debugging)的方式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置远程的解释器（remote interpreter）&lt;/li&gt;
&lt;li&gt;配置Python调试服务器（Python Debug Server）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要介绍Python Debug Server配置与使用。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用screen查看OpenStack进程</title>
      <link>http://dasheyuan.com/post/screen-openstack</link>
      <pubDate>Tue, 29 Mar 2016 14:00:01 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/screen-openstack</guid>
      <description>&lt;p&gt;介绍screen在openstack调试中的使用，整理screen的内容及快捷键。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chenshake.com/install-ubuntu-14-04-devstack/&#34;&gt;DevStack安装&lt;/a&gt;完成后，即OpenStack的平台搭建成功了，可以通过dashboard对平台进行使用。如果需要进一步调试和开发openstack，可以了解一下screen相关的内容。通过screen可以查看OpenStack运行的进程，最主要的是终止和重启需要调试的进程。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LTE网格架构简介</title>
      <link>http://dasheyuan.com/post/lte-network-architecture</link>
      <pubDate>Mon, 21 Mar 2016 23:00:01 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/lte-network-architecture</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://dasheyuan.com/images/R12-E-UTRAN.png&#34; alt=&#34;R12-E-UTRAN&#34; /&gt;&lt;br /&gt;
（上图为Basic Configuration of a 3GPP Access PLMN supporting CS and PS services (using GPRS and EPS) and interfaces，蓝色的框图和接口都是属于LTE的）&lt;/p&gt;

&lt;p&gt;首先描述了E-UTRAN（LTE）网络架构参考模型，给出当前3GPP中描述的整体网络架构，包括2G、3G和4G；然后是介绍E-UTRAN（LTE）中的网元及其功能。&lt;/p&gt;

&lt;p&gt;说明：文中的图片参考的是3GPP版本12的规范文档。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell重定向2&gt;&amp;1的理解</title>
      <link>http://dasheyuan.com/post/shell-redirect</link>
      <pubDate>Wed, 16 Mar 2016 22:11:03 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/shell-redirect</guid>
      <description>&lt;h2 id=&#34;一-系统文件描述符:690961c0631c450a5ba210a36e05dd89&#34;&gt;一、系统文件描述符&lt;/h2&gt;

&lt;p&gt;标准输入   0&lt;br /&gt;
 标准输出   1&lt;br /&gt;
 标准错误输出 2&lt;/p&gt;

&lt;p&gt;测试用例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat mytest.sh 
echo &amp;quot;my test&amp;quot;
mytest
$ ./mytest.sh 
my test  #标准输出
./mytest.sh: line 2: mytest: command not found #标准错误输出
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>程序员怎样才能写出一篇好的博客或者技术文章(转)</title>
      <link>http://dasheyuan.com/post/programmer-how-to-write-a-good-article</link>
      <pubDate>Wed, 02 Mar 2016 19:00:03 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/programmer-how-to-write-a-good-article</guid>
      <description>&lt;p&gt;转自：&lt;a href=&#34;https://www.phodal.com/blog/programmer-how-to-write-a-good-article&#34;&gt;https://www.phodal.com/blog/programmer-how-to-write-a-good-article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文章来源于 @justjavac在知乎上的邀请，要写在知乎上的回答。因为有原创，所以先首发，免得被伪原创。每天有大把的时间刷GitHub，写博客。从我大二的时候，大概六年前开始写技术博客，到现在已经有540+了，大概每年会写一百篇左右。&lt;/p&gt;

&lt;p&gt;这个答案由四部分组成：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;博客的流量来源&lt;/li&gt;
&lt;li&gt;不同文章类型的写作要点&lt;/li&gt;
&lt;li&gt;如何写博客&lt;/li&gt;
&lt;li&gt;如何收集写作的灵感&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>

