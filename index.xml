<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Chen Yuan&#39;s Blog on Chen Yuan&#39;s Blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://dasheyuan.com/</link>
    
    
    <copyright>Copyright (c) 2017,Chen Yuan; all rights reserved.</copyright>
    <updated>Fri, 06 Oct 2017 23:00:00 CST</updated>
    
    <item>
      <title>C&#43;&#43;11多线程编程(1)</title>
      <link>http://dasheyuan.com/post/cpp-11-multithreading-1/</link>
      <pubDate>Fri, 06 Oct 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-11-multithreading-1/</guid>
      <description>&lt;p&gt;前段时间，我在Google &lt;code&gt;std::thread&lt;/code&gt;时，读到了网站&lt;a href=&#34;http://thispointer.com/category/multithreading/&#34;&gt;thispointer.com&lt;/a&gt;的多线程入门教程，该教程通俗易懂，但又不缺乏深度，其示例代码结合了许多C++11的新的特性，比如匿名函数等(第4部分进行拓展说明)。&lt;br /&gt;
下面，我就按照这个教程，介绍C++11 Multithreading。&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;多线程创建和参数传递&lt;/li&gt;
&lt;li&gt;多线程条件竞争及其解决方法&lt;/li&gt;
&lt;li&gt;多线程事件处理、条件变量&lt;/li&gt;
&lt;li&gt;拓展与回顾&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;C++11已经支持多线程，但编译时需要添加&lt;code&gt;-std=c++11&lt;/code&gt;和 &lt;code&gt;-pthread&lt;/code&gt;选项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ -std=c++11 sample.cpp -pthread
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用CMake编译：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//CMakeLists.txt 中添加
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} &amp;quot;-std=c++11 -pthread&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;头文件：&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;测试框架Catch</title>
      <link>http://dasheyuan.com/post/cpp-test-framework-catch/</link>
      <pubDate>Sun, 07 May 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-test-framework-catch/</guid>
      <description>&lt;h1 id=&#34;catch简介&#34;&gt;Catch简介&lt;/h1&gt;

&lt;p&gt;Catch 一种是 C++ 测试框架。&lt;br /&gt;
主要特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置简单，下载&lt;code&gt;catch.hpp&lt;/code&gt;，然后&lt;code&gt;#include&lt;/code&gt;即可。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;无需额外库依赖。只要能编译 C++ 98 和包含 C++ 标准库。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;编写测试用例与编写函数一样。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Section&lt;/code&gt;中测试用例是独立运行的。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;兼容测试用例传统风格和BDD风格：&lt;code&gt;Given-When-Then&lt;/code&gt;。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;条件比较是只用一个核心的警告宏。使用了标准的C/C++ 运算符重载功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;测试工具Valgrind</title>
      <link>http://dasheyuan.com/post/cpp-test-tool-valgrind/</link>
      <pubDate>Sun, 07 May 2017 22:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cpp-test-tool-valgrind/</guid>
      <description>&lt;h1 id=&#34;引言&#34;&gt;引言&lt;/h1&gt;

&lt;p&gt;测试C++程序时，我们通常会在意两件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行结果是否正确？&lt;/li&gt;
&lt;li&gt;是否发生了内存泄漏？&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一件事所有编程语言都需要在意，通常是给程序各种输入，检验输出的正确性，Catch是一个轻巧的单元测试框架，学习起来非常容易；&lt;/p&gt;

&lt;p&gt;第二件事应该是C/C++独有的，需要跟踪运行时动态分配的内存，虽然可以自行重载new/delete运算符做到这一点，但Valgrind可以为我们检测绝大多数内存相关问题（包括内存泄漏、数组越界、使用未初始化变量等）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5G发展分析(1)-5G标准制定</title>
      <link>http://dasheyuan.com/post/analysis-of-global-5g-development-5g-standardization-so-far/</link>
      <pubDate>Thu, 27 Apr 2017 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/analysis-of-global-5g-development-5g-standardization-so-far/</guid>
      <description>&lt;p&gt;本文的内容来源于netmanias网站的文章&lt;a href=&#34;http://www.netmanias.com/en/?m=view&amp;amp;id=reports&amp;amp;no=11609&#34;&gt;《Analysis of Global 5G Development》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dasheyuan.com/images/Timeline of 5G in ITU-R and 3GPP.jpg&#34; alt=&#34;Timeline of 5G in ITU-R and 3GPP&#34; /&gt;&lt;br /&gt;
图 ITU和3GPP的5G标准制定时间线路↑&lt;/p&gt;

&lt;p&gt;5G标准化工作主要由两个标准化机构牵头：&lt;code&gt;ITU&lt;/code&gt; 和 &lt;code&gt;3GPP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake使用实例</title>
      <link>http://dasheyuan.com/post/cmake-example/</link>
      <pubDate>Mon, 25 Jul 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/cmake-example/</guid>
      <description>&lt;p&gt;最近在阅读OAI(OpenAirInterface，一个开源的LTE协议实现项目)的源码，该项目是通过CMake来编译的，今天通过使用一实例来学习CMake。
实例的目录文件结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;── TOP
    ├── CMakeCache.txt
    ├── Demo
    │   ├── CMakeLists.txt
    │   └── demo.c
    └── Hello
        ├── CMakeLists.txt
        ├── hello.c
        └── hello.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/TOP是顶层目录，有两个子目录/Demo和/Hello，其中/Hello中包含/Demo调用的库函数代码。&lt;br /&gt;
另外，每个目录下都会有一个CMakeLists.txt文件，文件内容如下：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python面向对象方法的定义方式</title>
      <link>http://dasheyuan.com/post/python-object-method-define/</link>
      <pubDate>Sat, 25 Jun 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/python-object-method-define/</guid>
      <description>&lt;p&gt;Python面向对象的方法(函数)定义方式通常有三种：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class A(object):
    # 普通方法
    def foo(self,x):
        print &amp;quot;executing foo(%s,%s)&amp;quot;%(self,x)

    # 类方法
    @classmethod
    def class_foo(cls,x):
        print &amp;quot;executing class_foo(%s,%s)&amp;quot;%(cls,x)

    # 静态方法
    @staticmethod
    def static_foo(x):
        print &amp;quot;executing static_foo(%s)&amp;quot;%x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义方式不同点：修饰函数和函数参数。&lt;br /&gt;
普通方法没有修饰函数，函数参数中第一个是&lt;code&gt;self&lt;/code&gt;，指向特定的实例；&lt;br /&gt;
类方法需要&lt;code&gt;@classmethod&lt;/code&gt;函数装饰，函数参数中第一个是&lt;code&gt;cls&lt;/code&gt;，指向这个类；&lt;br /&gt;
静态方法需要&lt;code&gt;@staticmethond&lt;/code&gt;函数装饰，函数参数可以不指定。&lt;/p&gt;

&lt;p&gt;普通方法用了实现具体实例的的函数；&lt;br /&gt;
类方法用来管理类的函数，比如记录类的实例个数；&lt;br /&gt;
静态方法被用来组织类之间有逻辑关系的函数。
&lt;br /&gt;
另外，常见的使用&lt;code&gt;@property&lt;/code&gt;及&lt;code&gt;@setter&lt;/code&gt;装饰器定义的方法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECS服务器安装LAMP环境</title>
      <link>http://dasheyuan.com/post/ecs-setup-lamp/</link>
      <pubDate>Wed, 22 Jun 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/ecs-setup-lamp/</guid>
      <description>&lt;p&gt;使用Tasksel可以很方便地在ECS服务器上安装LAMP环境。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 1.更新库，否则可能会出现tasksel aptitude failed的错误
$ sudo apt-get update

# 2.如果已经安装了可以跳过此步
$ sudo apt-get install tasksel

# 3.安装LAMP环境，根据提示完成安装
$ sudo tasksel install lamp-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tasksel提供了其他的软件包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看选择需要的软件包
$ sudo tasksel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，Ubuntu/Debian系统都可以通过这种方式安装LAMP环境。&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP的依赖管理工具Composer(2)</title>
      <link>http://dasheyuan.com/post/php-composer-2/</link>
      <pubDate>Thu, 02 Jun 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-composer-2/</guid>
      <description>&lt;p&gt;之前介绍过如何安装Composer和简单使用，出门左拐能找到。&lt;br /&gt;
&lt;a href=&#34;http://http://dasheyuan.com/post/php-composer-1/&#34;&gt;PHP的依赖管理工具Composer(1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在更深入地学习Composer。在上一篇MyProject的&lt;code&gt;app.php&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;
$log = new Monolog\Logger(&#39;name&#39;);

...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是为了 &lt;code&gt;new Monolog\Logger(&#39;name&#39;)&lt;/code&gt; ，所以&lt;code&gt;require &#39;vendor/autoload.php&#39;&lt;/code&gt;，作用是为了找到Monolog\Logger类的实现代码，然后require。&lt;br /&gt;
这应该很好理解，因为假如不用&lt;code&gt;require &#39;vendor/autoload.php&#39;&lt;/code&gt;，那就必须require &lt;code&gt;Logger.php&lt;/code&gt;源码。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>学习PHP闭包(Closure)</title>
      <link>http://dasheyuan.com/post/php-closure/</link>
      <pubDate>Sat, 28 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-closure/</guid>
      <description>&lt;p&gt;在学习Laravel框架的时候遇到了“闭包”的概念，查PHP的手册及网上的解释，分析对比一下，试着去理解。&lt;/p&gt;

&lt;p&gt;可能目前理解的还不妥，先记录下来吧。&lt;/p&gt;

&lt;h2 id=&#34;一-闭包函数的基本用法&#34;&gt;一、闭包函数的基本用法&lt;/h2&gt;

&lt;p&gt;匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（callback）参数的值。&lt;br /&gt;
Example #1 匿名函数示例，用作回调函数参数的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
echo preg_replace_callback(&#39;~-([a-z])~&#39;, function ($match) {
    return strtoupper($match[1]);
}, &#39;hello-world&#39;);
// 输出 helloWorld
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>PHP的依赖管理工具Composer(1)</title>
      <link>http://dasheyuan.com/post/php-composer-1/</link>
      <pubDate>Sat, 21 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/php-composer-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://image.phpcomposer.com/d/1e/768684492400b1470aa7882b29d5c.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
无论是在系统中，还是在高级编程语言中，依赖管理工具都扮演着重要的角色，因为它极大地提高了我们的开发效率。&lt;/p&gt;

&lt;p&gt;Ubuntu有apt-get，Python有pip，Node.js有npm，PHP呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub的高级搜索功能</title>
      <link>http://dasheyuan.com/post/github-advanced-search/</link>
      <pubDate>Tue, 17 May 2016 23:00:00 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/github-advanced-search/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://help.github.com/assets/images/help/search/advanced_search_demo.gif&#34; alt=&#34;&#34; /&gt;
今天才发现GitHub是支持高级搜索功能的，使用了一下，功能很棒，就是搜索页面太“隐秘”了，现在才发现这个功能。&lt;/p&gt;

&lt;p&gt;高级搜索链接：&lt;a href=&#34;https://github.com/search/advanced&#34;&gt;https://github.com/search/advanced&lt;/a&gt;&lt;br /&gt;
也可以点击GitHub搜索框，回车后，出现的页面中提示支持Advanced Search功能。

尝试一下查询PHP语言项目中，点赞超过1000的项目。&lt;br /&gt;
通过在多种表单中填关键信息，会在搜索框中自动生成搜索表达式：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu中Node.js的安装方法</title>
      <link>http://dasheyuan.com/post/ubuntu-install-nodejs-scripts/</link>
      <pubDate>Thu, 12 May 2016 22:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/ubuntu-install-nodejs-scripts/</guid>
      <description>&lt;p&gt;最近重新学习一下JavaScript，了解Node.js是什么，给自己充充电。&lt;/p&gt;

&lt;p&gt;Ubuntu直接使用&lt;code&gt;sudo apt-get install nodejs&lt;/code&gt;命名安装Node.js无法安装最新版本。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;官网&lt;/a&gt;上给出来的安装命令可以解决这个问题:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -

sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl &lt;code&gt;-s&lt;/code&gt; 静默状态，即不输出任何信息。&lt;/p&gt;

&lt;p&gt;curl &lt;code&gt;-L&lt;/code&gt; 重定向地址，即如果当前地址发生重定向，获取重定向的地址的内容(参考1)。&lt;/p&gt;

&lt;p&gt;sudo &lt;code&gt;-E&lt;/code&gt; 在sudo执行时保留当前用户已存在的环境变量,不会被sudo重置。&lt;/p&gt;

&lt;p&gt;sudo apt-get install &lt;code&gt;-y&lt;/code&gt; 默认安装过程中的确认步骤(yes)。&lt;/p&gt;

&lt;p&gt;bash &lt;code&gt;-&lt;/code&gt;（参考2）&lt;/p&gt;

&lt;h3 id=&#34;关于减号-的用途&#34;&gt;“关于减号 - 的用途&lt;/h3&gt;

&lt;p&gt;管线命令在 bash 的连续的处理程序中是相当重要的！另外，在 log file 的分析当中也是相当重要的一环， 所以请特别留意！另外，在管线命令当中，常常会使用到前一个命令的 stdout 作为这次的 stdin ， 某些命令需要用到文件名 (例如 tar) 来进行处理时，该 stdin 与 stdout 可以利用减号 &amp;ldquo;-&amp;rdquo; 来替代， 举例来说：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar -cvf - /home | tar -xvf -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个例子是说：『我将 /home 里面的文件给他打包，但打包的数据不是纪录到文件，而是传送到 stdout； 经过管线后，将 tar -cvf - /home 传送给后面的 tar -xvf - 』。后面的这个 - 则是取用前一个命令的 stdout， 因此，我们就不需要使用 file 了！这是很常见的例子喔！注意注意！&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;”&lt;/h3&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH免密码登录远程主机</title>
      <link>http://dasheyuan.com/post/remote-login-without-password/</link>
      <pubDate>Sat, 07 May 2016 18:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/remote-login-without-password/</guid>
      <description>&lt;p&gt;操作Linux系统一般会使用SSH工具进行远程登录系统操作。&lt;/p&gt;

&lt;p&gt;使用SSH工具远程登录系统，一般会使用Linux系统的账号和密码。&lt;/p&gt;

&lt;p&gt;使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。&lt;/p&gt;

&lt;p&gt;所谓&amp;rdquo;公钥登录&amp;rdquo;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。&lt;/p&gt;

&lt;p&gt;另外，这个过程之前会有一个远程主机向用户发送远程主机公钥的过程，用户需要判断远程主机的公钥是否是真正的远程主机，不然就会带来安全问题（&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;中间者攻击&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;可以知道，上面的过程要用到&lt;strong&gt;两对&lt;/strong&gt;密钥对。一对是用作远程主机向客户端安全通信的，一对用作是客户端向远程主机安全通信的。&lt;/p&gt;

&lt;p&gt;测试环境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04安装openssh-server作为远程服务器，用户：bwa  IP：192.168.27.128&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04终端作为客户端 IP：192.168.27.3，或者使用Xshell工具登录&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>北京爱立信参观交流</title>
      <link>http://dasheyuan.com/post/visit-beijing-ericsson/</link>
      <pubDate>Wed, 27 Apr 2016 18:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/visit-beijing-ericsson/</guid>
      <description>&lt;p&gt;4月26日至29日，爱立信“技术创新周”在北京爱立信电信大厦举行，我们这边实验室也收到了邀请。今天有幸能跟随着老师到爱立信参观学习。“创新周活动以‘创新成就未来’为主题，全面呈现爱立信在5G、云和IP、物联网、网络社会等领域的技术创新和领先的解决方案”。上一句话来自网络，我引过来是为了把文章显得高(cou)大(zi)上(shu)的:)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Eclipse IoT 2016 物联网开发者调查统计</title>
      <link>http://dasheyuan.com/post/iot-developer-survey-2016/</link>
      <pubDate>Wed, 20 Apr 2016 21:00:28 CST</pubDate>
      
      <guid>http://dasheyuan.com/post/iot-developer-survey-2016/</guid>
      <description>&lt;p&gt;2016年4月14日，Eclipse IoT工作组发布了年度的物联网开发者调查结果，这次调查联合了IEEE IoT和AGILE-IoT组织，扩大了参与者的范围和回应，今年调查参与者从去年392人增加到528人。调查数据统计的结果更有参考价值了。&lt;/p&gt;

&lt;p&gt;从2016年调查的结果分析，有以下几点关键趋势：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;目前，大部分参与者的公司正在或将研发IoT解决方案。&lt;/li&gt;
&lt;li&gt;安全问题成为了一个关键的研究问题。&lt;/li&gt;
&lt;li&gt;IoT开发编程语言排行：Java， C， Java Script, Python。&lt;/li&gt;
&lt;li&gt;MQTT和HTTP在消息协议占主要地位。（CoAP紧跟其后）&lt;/li&gt;
&lt;li&gt;IoT操作系统Linux占主要地位。&lt;/li&gt;
&lt;li&gt;AWS主导者IoT云服务。（私有云紧跟其后）&lt;/li&gt;
&lt;li&gt;IoT开源代码无处不在。

在这份调查统计结果中，我比较关心的是通信协议使用的情况。&lt;br /&gt;
&lt;img src=&#34;http://dasheyuan.com/images/iot survey.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
(上图摘自参考资料2，IoT解决方案中使用的通信协议)
在无线接入技术中，WiFi使用的比例是最高的，我想原因很简单，现在WiFi接入的成本越来越低，而且很方便。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，我也还注意到还有LPWAN中的LTE-M。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

